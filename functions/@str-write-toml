#!/usr/bin/env zsh

# -*- mode: sh; sh-indentation: 4; indent-tabs-mode: nil; sh-basic-offset: 4; -*-
# Copyright (c) 2018 Sebastian Gniazdowski
#
# @str-write-toml
#
# Reads a TOML file with support for single-level array.
#
# $1 - path to the toml file to parse
# $2 - name of output hash (TOML by default)
# $3 - prefix for keys in the hash (can be empty)
#
# Writes to given hash under keys built in following way: ${3}<section>_field.
# Values are values from toml file. The values can be quoted and concatenated
# strings if they're an array. For example:
#
# [sec]
# array = [ val1, "value 2", value&3 ]
#
# Then the fields of the hash will be:
# TOML[<sec>_array]="val1 value\ 2 value\&3"
#
# To retrieve the array stored in such way, use the substitution
# "${(@Q)${(@z)TOML[<sec>_array]}}":
#
# local -a array
# array=( "${(@Q)${(@z)TOML[<sec>_array]}}" )
#

@str-write-toml() {
    local __file="$1" __hash=${2:-INI} __order=${3:-order}
    local __item __cur_section="void" __access_string REPLY
    local -a match mbegin mend __inorder
    integer retval

    inorder=( "${(@P)__order}" )
    # Don't leak any helper functions
    typeset -g tomatentry
    tomatentry=( ${(k)functions} )
    trap "unset -f -- \"\${(k)functions[@]:|tomatentry}\" &>/dev/null; unset tomatentry" EXIT
    trap "unset -f -- \"\${(k)functions[@]:|tomatentry}\" &>/dev/null; unset tomatentry; return 1" INT

    [[ -e "$__file" ]]&&((!1))&&iqmsg {208}Warning: {203}@str-write-toml: \
        {174}toml file {41}%B$__file{203}%b already exists

    __file=$__file.out
    : > $__file

    local q
    for __item in $inorder; do
        if [[ $__item == (#b)(*)-([[:space:]]#\#*) ]]; then
            if [[ $q != $match[1] ]]; then
                q=$match[1]
                print "[$q]" >> $__file
            fi
            print $match[2] >> $__file
            continue
        fi
        if [[ $q != ${__item%%__*} ]]; then
            q=${__item%%__*}
            print "[$q]" >> $__file
        fi
        __access_string="${__hash}[${__item}]"
        print ${__item##*__}=${(P)__access_string} >> $__file
    done

    command ln -f $__file ${__file%.out}
    command rm -f $__file
    return retval
}


# vim:ft=zsh:sw=4:sts=4:et
